From 18cd0f7d5a979252b30a35537fa3bbaea60fdc5f Mon Sep 17 00:00:00 2001
From: Guillaume Zajac <guillaume.zajac@linux.intel.com>
Date: Wed, 10 Oct 2012 11:32:22 +0200
Subject: [PATCH 16/23] s_ps: Remove plateform dependencies to setup pdp
 context
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

---
 src/s_ps.c |  130 +++++++++++++++++++++++++++++-------------------------------
 1 file changed, 62 insertions(+), 68 deletions(-)

diff --git a/src/s_ps.c b/src/s_ps.c
index 78bb9c7..107d672 100644
--- a/src/s_ps.c
+++ b/src/s_ps.c
@@ -43,11 +43,6 @@
 #include "s_common.h"
 #include "s_ps.h"
 
-
-
-#define VNET_CH_PATH_BOOT0  "/dev/umts_boot0"
-#define IOCTL_CG_DATA_SEND  _IO('o', 0x37)
-
 /*Invalid Session ID*/
 #define PS_INVALID_CID  999 /*Need to check */
 
@@ -61,6 +56,7 @@
 #define AT_XDNS_ENABLE 1
 #define AT_XDNS_DISABLE 0
 #define AT_SESSION_DOWN 0
+
 static void _ps_free(void *ptr)
 {
 	dbg("Entered");
@@ -83,33 +79,6 @@ static void _unable_to_get_pending(CoreObject *co_ps, CoreObject *ps_context)
 	(void) tcore_context_set_state(ps_context, CONTEXT_STATE_DEACTIVATED);
 	dbg("Exit");
 }
-static TReturn _pdp_device_control(unsigned int cid)
-{
-	int fd = -1;
-	int ret = -1;
-	fd = open(VNET_CH_PATH_BOOT0, O_RDWR);
-	if (fd < 0) {
-		dbg("error : open [ %s ] [ %s ]", VNET_CH_PATH_BOOT0, strerror(errno));
-		return -1;
-	}
-	/*To Do for different Cids*/
-	dbg("Send IOCTL: arg 0x05 (0101) HSIC1, cid=%d \n", cid);
-	if (cid == 1) {
-		ret = ioctl(fd, IOCTL_CG_DATA_SEND, 0x05);
-	} else if (cid == 2) {
-		ret = ioctl(fd, IOCTL_CG_DATA_SEND, 0xA);
-	} else {
-		dbg("More Than 2 context are not supported right Now");
-	}
-	close(fd);
-	if (ret < 0) {
-		dbg("[ error ] send IOCTL_CG_DATA_SEND (0x%x) fail!! \n", IOCTL_CG_DATA_SEND);
-		return TCORE_RETURN_FAILURE;
-	} else {
-		dbg("[ ok ] send IOCTL_CG_DATA_SEND (0x%x) success!! \n", IOCTL_CG_DATA_SEND);
-		return TCORE_RETURN_SUCCESS;
-	}
-}
 
 static gboolean on_event_cgev_handle(CoreObject *co_ps, const void *data, void *user_data)
 {
@@ -445,10 +414,15 @@ static void on_response_deactivate_ps_context(TcorePending *p, int data_len, con
 
 	cid = tcore_context_get_id(ps_context);
 	if (resp->success) {
+		char *devname = tcore_context_get_ipv4_devname(ps_context);
+
 		dbg("Response OK");
 		/*get the data usage and report it application*/
 		(void) send_data_counter_command(co_ps, ps_context);
 		/*get the HSDPA status and report it to server*/
+		dbg("Removing interface %s", devname);
+		if (tcore_util_netif_down(devname) != TCORE_RETURN_SUCCESS)
+			dbg("util_netif_down() failed.");
 	} else {
 		dbg("Response NOK");
 		send_undefine_context_cmd(co_ps, ps_context);
@@ -489,11 +463,38 @@ static TReturn deactivate_ps_context(CoreObject *co_ps, CoreObject *ps_context,
 	return TCORE_RETURN_FAILURE;
 }
 
-static void on_response_get_dns_cmnd(TcorePending *p, int data_len, const void *data, void *user_data)
+static void on_setup_pdp(CoreObject *co_ps, const char *iname, void *user_data)
 {
-	struct tnoti_ps_pdp_ipconfiguration noti = {0};
+	struct tnoti_ps_pdp_ipconfiguration *noti = user_data;
 	struct tnoti_ps_call_status data_status = {0};
-	char devname[10] = {0, };
+
+	dbg("entry");
+
+	memcpy(&noti->devname, iname, strlen(iname));
+	dbg("devname = [%s]", iname);
+	if (tcore_util_netif_up(iname) != TCORE_RETURN_SUCCESS) {
+		dbg("util_netif_up() failed.");
+	}
+
+	dbg("Send Notification upwards of IP address");
+	tcore_server_send_notification(tcore_plugin_ref_server(tcore_object_ref_plugin(co_ps)), co_ps, TNOTI_PS_PDP_IPCONFIGURATION,
+								   sizeof(struct tnoti_ps_pdp_ipconfiguration), noti);
+
+	data_status.context_id = noti->context_id;
+	data_status.state = 1;
+	data_status.result = 0;
+
+	tcore_server_send_notification(tcore_plugin_ref_server(tcore_object_ref_plugin(co_ps)), co_ps,
+								   TNOTI_PS_CALL_STATUS, sizeof(struct tnoti_ps_call_status), &data_status);
+
+	g_free(noti);
+
+	dbg("exit");
+}
+
+static void on_response_get_dns_cmnd(TcorePending *p, int data_len, const void *data, void *user_data)
+{
+	struct tnoti_ps_pdp_ipconfiguration *noti;
 	char *dns_prim = NULL;
 	char *dns_sec = NULL;
 	char *pdp_address = NULL;
@@ -512,6 +513,14 @@ static void on_response_get_dns_cmnd(TcorePending *p, int data_len, const void *
 	const TcoreATResponse *resp = data;
 	CoreObject *co_ps = tcore_pending_ref_core_object(p);
 	int cid = tcore_context_get_id(ps_context);
+	TcorePlugin *plugin = tcore_object_ref_plugin(co_ps);
+	TcoreHal *h;
+	struct global_data *gd;
+
+	noti = g_new0(struct tnoti_ps_pdp_ipconfiguration, 1);
+
+	gd = tcore_plugin_ref_user_data(plugin);
+	h = gd->hal;
 
 	dbg("Entered");
 
@@ -548,7 +557,7 @@ static void on_response_get_dns_cmnd(TcorePending *p, int data_len, const void *
 				index = 0;
 				token_add = strtok(dns_prim, ".");
 				while (token_add != NULL) {
-					noti.primary_dns[index++] = atoi(token_add);
+					noti->primary_dns[index++] = atoi(token_add);
 					token_add = strtok(NULL, ".");
 				}
 				_ps_free(dns_prim);
@@ -563,7 +572,7 @@ static void on_response_get_dns_cmnd(TcorePending *p, int data_len, const void *
 				index = 0;
 				token_add = strtok(dns_sec, ".");
 				while (token_add != NULL) {
-					noti.secondary_dns[index++] = atoi(token_add);
+					noti->secondary_dns[index++] = atoi(token_add);
 					token_add = strtok(NULL, ".");
 				}
 				_ps_free(dns_sec);
@@ -580,15 +589,15 @@ exit_fail:
 	{
 		dbg("Adding default DNS");
 		dbg("Adding the Primary DNS");
-		noti.primary_dns[0] = 8;
-		noti.primary_dns[1] = 8;
-		noti.primary_dns[2] = 8;
-		noti.primary_dns[3] = 8;
+		noti->primary_dns[0] = 8;
+		noti->primary_dns[1] = 8;
+		noti->primary_dns[2] = 8;
+		noti->primary_dns[3] = 8;
 		dbg("Adding Secondary DNS");
-		noti.secondary_dns[0] = 8;
-		noti.secondary_dns[1] = 8;
-		noti.secondary_dns[2] = 4;
-		noti.secondary_dns[3] = 4;
+		noti->secondary_dns[0] = 8;
+		noti->secondary_dns[1] = 8;
+		noti->secondary_dns[2] = 4;
+		noti->secondary_dns[3] = 4;
 	}
 exit_success:
 	{
@@ -606,32 +615,17 @@ exit_success:
 		}
 		_ps_free(pdp_address);
 		_ps_free((void *) token_pdp_address);
-		noti.field_flag = (0x0001 & 0x0002 & 0x0004);
-		noti.err = 0;
-		noti.context_id = cid;
-		memcpy(&noti.ip_address, &addr, 4);
-		if (_pdp_device_control(cid) != TCORE_RETURN_SUCCESS) {
-			dbg("_pdp_device_control() failed. errno=%d", errno);
-		}
-		snprintf(devname, 10, "pdp%d", cid - 1);
-		memcpy(noti.devname, devname, 10);
-		dbg("devname = [%s]", devname);
-		if (tcore_util_netif_up(devname) != TCORE_RETURN_SUCCESS) {
-			dbg("util_netif_up() failed. errno=%d", errno);
-		}
-
-		dbg("Send Notification upwards of IP address");
-		tcore_server_send_notification(tcore_plugin_ref_server(tcore_object_ref_plugin(co_ps)), co_ps, TNOTI_PS_PDP_IPCONFIGURATION,
-									   sizeof(struct tnoti_ps_pdp_ipconfiguration), &noti);
+		noti->field_flag = (0x0001 & 0x0002 & 0x0004);
+		noti->err = 0;
+		noti->context_id = cid;
+		memcpy(&noti->ip_address, &addr, 4);
 
-		data_status.context_id = cid;
-		data_status.state = 1;
-		data_status.result = 0;
+		if (tcore_hal_setup_pdp(h, co_ps, on_setup_pdp, noti, cid) != TCORE_RETURN_SUCCESS) {
+			err("setup PDP context failed");
+			return;
+		}
 
-		tcore_server_send_notification(tcore_plugin_ref_server(tcore_object_ref_plugin(co_ps)), co_ps,
-									   TNOTI_PS_CALL_STATUS, sizeof(struct tnoti_ps_call_status), &data_status);
 		dbg("EXIT : Without error");
-		return;
 	}
 }
 
-- 
1.7.10.4

