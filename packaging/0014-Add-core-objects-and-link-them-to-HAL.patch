From 96005a4ba04e16b3ae22db6b6f71ea54c88257c8 Mon Sep 17 00:00:00 2001
From: Guillaume Zajac <guillaume.zajac@linux.intel.com>
Date: Mon, 8 Oct 2012 15:41:21 +0200
Subject: [PATCH 14/23] Add core objects and link them to HAL
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Conflicts:
	src/s_modem.c
---
 src/s_call.c    |    7 +++----
 src/s_modem.c   |    8 ++++++--
 src/s_network.c |    4 +++-
 src/s_ps.c      |    5 ++++-
 src/s_sat.c     |    4 +++-
 src/s_sim.c     |    4 +++-
 src/s_sms.c     |    4 +++-
 src/s_ss.c      |    4 +++-
 8 files changed, 28 insertions(+), 12 deletions(-)

diff --git a/src/s_call.c b/src/s_call.c
index 2a2b027..2d2b711 100644
--- a/src/s_call.c
+++ b/src/s_call.c
@@ -272,7 +272,6 @@ const call_end_cause_info call_end_cause_table[] =   // call end cause table to
 static enum tcore_call_cli_mode _get_clir_status(char *num)
 {
 	enum tcore_call_cli_mode clir = CALL_CLI_MODE_DEFAULT;
-
 	dbg("Entry");
 
 	if (!strncmp(num, "*31#", 4)) {
@@ -3888,16 +3887,17 @@ gboolean s_call_init(TcorePlugin *p, TcoreHal *h)
 {
 	CoreObject *o = NULL;
 	struct property_call_info *data = NULL;
-
 	dbg("Entry");
 
 	// Creating Call COre object
-	o = tcore_call_new(p, "call", &call_ops, h);
+	o = tcore_call_new(p, "call", &call_ops, NULL);
 	if (!o) {
 		err("Failed to create Call Core Object");
 		return FALSE;
 	}
 
+	tcore_hal_link_object(h, o);
+
 	// Set Call Operations
 	tcore_call_information_set_operations(o, &call_information_ops);
 
@@ -3918,7 +3918,6 @@ void s_call_exit(TcorePlugin *p)
 {
 	CoreObject *o = NULL;
 	struct property_network_info *data = NULL;
-
 	dbg("Entry");
 
 	o = tcore_plugin_ref_core_object(p, "call");
diff --git a/src/s_modem.c b/src/s_modem.c
index a0fe4dc..6212467 100644
--- a/src/s_modem.c
+++ b/src/s_modem.c
@@ -163,7 +163,7 @@ void prepare_and_send_pending_request(TcorePlugin *plugin, char *co_name, const
 	tcore_pending_set_request_data(pending, 0, req);
 	tcore_pending_set_response_callback(pending, callback, NULL);
 	tcore_pending_set_send_callback(pending, on_confirmation_modem_message_send, NULL);
-	tcore_pending_link_user_request(pending, NULL); // set user request to NULL - this is intenal request
+	tcore_pending_link_user_request(pending, NULL); // set user request to NULL - this is internal request
 	ret = tcore_hal_send_request(hal, pending);
 	return;
 }
@@ -941,10 +941,14 @@ gboolean s_modem_init(TcorePlugin *p, TcoreHal *h)
 	TelMiscSNInformation *imei_property = NULL;
 	TelMiscSNInformation *sn_property = NULL;
 
-	o = tcore_modem_new(p, "modem", &modem_ops, h);
+	dbg("Entry");
+
+	o = tcore_modem_new(p, "modem", &modem_ops, NULL);
 	if (!o)
 		return FALSE;
 
+	tcore_hal_link_object(h, o);
+
 	work_queue = g_queue_new();
 	tcore_object_link_user_data(o, work_queue);
 
diff --git a/src/s_network.c b/src/s_network.c
index 7c5e8d9..0cbdc23 100644
--- a/src/s_network.c
+++ b/src/s_network.c
@@ -2169,10 +2169,12 @@ gboolean s_network_init(TcorePlugin *p, TcoreHal *h)
 {
 	CoreObject *o = NULL;
 
-	o = tcore_network_new(p, "umts_network", &network_ops, h);
+	o = tcore_network_new(p, "umts_network", &network_ops, NULL);
 	if (!o)
 		return FALSE;
 
+	tcore_hal_link_object(h, o);
+
 	tcore_object_add_callback(o, "+CREG", on_event_cs_network_regist, NULL);
 	tcore_object_add_callback(o, "+CGREG", on_event_ps_network_regist, NULL);
 	tcore_object_add_callback(o, "+XCIEV", on_event_network_icon_info, NULL);
diff --git a/src/s_ps.c b/src/s_ps.c
index e87e943..78bb9c7 100644
--- a/src/s_ps.c
+++ b/src/s_ps.c
@@ -945,10 +945,13 @@ gboolean s_ps_init(TcorePlugin *p, TcoreHal *hal)
 	struct context *context_table = NULL;
 
 	dbg("Entered");
-	o = tcore_ps_new(p, "umts_ps", &ps_ops, hal);
+	o = tcore_ps_new(p, "umts_ps", &ps_ops, NULL);
 
 	if (!o)
 		return FALSE;
+
+	tcore_hal_link_object(hal, o);
+
 	tcore_object_link_user_data(o, (void *) context_table);
 
 	tcore_object_add_callback(o, "+CGEV", on_event_cgev_handle, p);
diff --git a/src/s_sat.c b/src/s_sat.c
index ebacea0..774388c 100644
--- a/src/s_sat.c
+++ b/src/s_sat.c
@@ -451,12 +451,14 @@ gboolean s_sat_init(TcorePlugin *p, TcoreHal *h)
 	CoreObject *o = NULL;
 
 	dbg("Entry");
-	o = tcore_sat_new(p, "sat", &sat_ops, h);
+	o = tcore_sat_new(p, "sat", &sat_ops, NULL);
 	if (!o) {
 		dbg("CoreObject NULL !!");
 		return FALSE;
 	}
 
+	tcore_hal_link_object(h, o);
+
 	tcore_object_add_callback(o, "+SATI", on_event_sat_proactive_command, NULL);
 	tcore_object_add_callback(o, "+SATN", on_event_sat_proactive_command, NULL);
 	tcore_object_add_callback(o, "+SATF", on_response_terminal_response_confirm, NULL);
diff --git a/src/s_sim.c b/src/s_sim.c
index 7bff6dd..a74bf7c 100644
--- a/src/s_sim.c
+++ b/src/s_sim.c
@@ -3336,11 +3336,13 @@ gboolean s_sim_init(TcorePlugin *p, TcoreHal *h)
 
 	dbg("entry");
 
-	o = tcore_sim_new(p, "sim", &sim_ops, h);
+	o = tcore_sim_new(p, "sim", &sim_ops, NULL);
 
 	if (!o)
 		return FALSE;
 
+	tcore_hal_link_object(h, o);
+
 	file_meta = calloc(sizeof(struct s_sim_property), 1);
 	if (!file_meta)
 		return FALSE;
diff --git a/src/s_sms.c b/src/s_sms.c
index 20067a3..06b4dcd 100644
--- a/src/s_sms.c
+++ b/src/s_sms.c
@@ -3207,7 +3207,7 @@ gboolean s_sms_init(TcorePlugin *plugin, TcoreHal *hal)
 	dbg("plugin: [%p]", plugin);
 	dbg("hal: [%p]", hal);
 
-	obj = tcore_sms_new(plugin, "umts_sms", &sms_ops, hal);
+	obj = tcore_sms_new(plugin, "umts_sms", &sms_ops, NULL);
 
 	data = calloc(sizeof(struct property_sms_info), 1);
 
@@ -3219,6 +3219,8 @@ gboolean s_sms_init(TcorePlugin *plugin, TcoreHal *hal)
 		return FALSE;
 	}
 
+	tcore_hal_link_object(hal, obj);
+
 	work_queue = g_queue_new();
 	tcore_object_link_user_data(obj, work_queue);
 
diff --git a/src/s_ss.c b/src/s_ss.c
index 0781ac7..7a7e050 100644
--- a/src/s_ss.c
+++ b/src/s_ss.c
@@ -2756,7 +2756,7 @@ gboolean s_ss_init(TcorePlugin *p, TcoreHal *h)
 	CoreObject *so = 0, *co = 0;
 	struct property_call_info *data = 0;
 
-	so = tcore_ss_new(p, "ss", &ss_ops, h);
+	so = tcore_ss_new(p, "ss", &ss_ops, NULL);
 	if (!so) {
 		dbg("[ error ] ss_new()");
 		return FALSE;
@@ -2768,6 +2768,8 @@ gboolean s_ss_init(TcorePlugin *p, TcoreHal *h)
 		return FALSE;
 	}
 
+	tcore_hal_link_object(h, so);
+
 	tcore_call_control_set_operations(co, &call_ops);
 
 	tcore_object_add_callback(so, "+CSSU", on_notification_ss_info, 0);
-- 
1.7.10.4

