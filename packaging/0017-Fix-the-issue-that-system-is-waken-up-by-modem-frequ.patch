From ddcdf41b670a51aee4f30bd3dc2574836e6e324b Mon Sep 17 00:00:00 2001
From: Caiwen Zhang <caiwen.zhang@intel.com>
Date: Fri, 19 Oct 2012 23:16:45 +0800
Subject: [PATCH 17/23] Fix the issue that system is waken up by modem
 frequently
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Disable modem unsolicited message when screen is off, enable modem
unsolicted message when screen is on.

Conflicts:
	CMakeLists.txt
	packaging/tel-plugin-imc.spec
---
 CMakeLists.txt  |    6 ++++--
 src/s_network.c |   24 ++++++++++++++++++++++++
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9bbaec3..101137c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,13 +10,15 @@ SET(INCLUDEDIR "\${prefix}/include")
 
 # Set required packages
 INCLUDE(FindPkgConfig)
-pkg_check_modules(pkgs REQUIRED glib-2.0 tcore dlog db-util)
+pkg_check_modules(pkgs REQUIRED glib-2.0 tcore dlog db-util libxml-2.0 vconf)
 
 FOREACH(flag ${pkgs_CFLAGS})
 	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
 ENDFOREACH(flag)
 
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include/)
+INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include
+					/usr/include/libxml2
+					)
 
 SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS} -Werror -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wdeclaration-after-statement -Wmissing-declarations -Wredundant-decls -Wcast-align")
 
diff --git a/src/s_network.c b/src/s_network.c
index 0cbdc23..ce1ce34 100644
--- a/src/s_network.c
+++ b/src/s_network.c
@@ -23,6 +23,8 @@
 #include <string.h>
 
 #include <glib.h>
+#include <vconf.h>
+#include <glib-object.h>
 
 #include <tcore.h>
 #include <hal.h>
@@ -103,6 +105,7 @@ static unsigned int lookup_tbl_access_technology[] = {
 	[AT_COPS_ACT_E_UTRAN] = NETWORK_ACT_GSM_UTRAN,
 };
 
+extern void prepare_and_send_pending_request(TcorePlugin *plugin, char *co_name, const char *at_cmd, const char *prefix, enum tcore_at_command_type at_cmd_type, TcorePendingResponseCallback callback);
 static gboolean get_serving_network(CoreObject *o, UserRequest *ur);
 
 
@@ -2165,6 +2168,23 @@ static struct tcore_network_operations network_ops = {
 	.get_serving_network = get_serving_network,
 };
 
+static void on_screen_status_changed(keynode_t *key, void* data)
+{
+	TcorePlugin *plugin = NULL;
+	int state;
+	dbg("Entry");
+
+	plugin = (TcorePlugin *) data;
+	if( vconf_keynode_get_type(key) == VCONF_TYPE_INT) {
+		state = vconf_keynode_get_int(key);
+
+		if (state == VCONFKEY_PM_STATE_NORMAL) //screen on
+			prepare_and_send_pending_request(plugin, "umts_network", "AT+CREG=2;+XREG=2;+XCSQ=1;+XMER=1;+XFDOR=3", NULL, TCORE_AT_NO_RESULT, NULL);
+		else if (state == VCONFKEY_PM_STATE_LCDOFF) //screen off
+			prepare_and_send_pending_request(plugin, "umts_network", "AT+CREG=0;+XREG=0;+XCSQ=0;+XMER=0;+XFDOR=2", NULL, TCORE_AT_NO_RESULT, NULL);
+	}
+}
+
 gboolean s_network_init(TcorePlugin *p, TcoreHal *h)
 {
 	CoreObject *o = NULL;
@@ -2184,6 +2204,8 @@ gboolean s_network_init(TcorePlugin *p, TcoreHal *h)
 
 	tcore_server_add_notification_hook(tcore_plugin_ref_server(p), TNOTI_SIM_STATUS, on_hook_sim_init, o);
 
+	vconf_notify_key_changed(VCONFKEY_PM_STATE, on_screen_status_changed, p);
+
 	_insert_mcc_mnc_oper_list(p, o);
 
 	return TRUE;
@@ -2193,6 +2215,8 @@ void s_network_exit(TcorePlugin *p)
 {
 	CoreObject *o;
 
+	vconf_ignore_key_changed(VCONFKEY_PM_STATE, on_screen_status_changed);
+
 	o = tcore_plugin_ref_core_object(p, "umts_network");
 
 	tcore_network_free(o);
-- 
1.7.10.4

